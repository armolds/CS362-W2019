TESTING numHandCards():
Test player 0 with 1 card(s) in their hand
G.handCount = 1, expected = 1
Test player 0 with 2 card(s) in their hand
G.handCount = 2, expected = 2
Test player 0 with 3 card(s) in their hand
G.handCount = 3, expected = 3
Test player 0 with 4 card(s) in their hand
G.handCount = 4, expected = 4
Test player 0 with 5 card(s) in their hand
G.handCount = 5, expected = 5
Test player 1 with 1 card(s) in their hand
G.handCount = 1, expected = 1
Test player 1 with 2 card(s) in their hand
G.handCount = 2, expected = 2
Test player 1 with 3 card(s) in their hand
G.handCount = 3, expected = 3
Test player 1 with 4 card(s) in their hand
G.handCount = 4, expected = 4
Test player 1 with 5 card(s) in their hand
G.handCount = 5, expected = 5
All tests passed!
TESTING getCost():
Card great_hall - Cost Should Be = 3
Cost returned by function: 3
Card mine - Cost Should Be = 5
Cost returned by function: 5
Card baron - Cost Should Be = 4
Cost returned by function: 4
Card council room - Cost Should Be = 5
Cost returned by function: 5
Card feast - Cost Should Be = 4
Cost returned by function: 4
All tests passed!
TESTING shuffle():
TESTING PLAYER 0
Original Deck Count = 5
Card #0 ID: 1
Card #1 ID: 1
Card #2 ID: 4
Card #3 ID: 4
Card #4 ID: 4
Cards have been shuffled 2 times to find a new order.
Original Deck Count = 5, Shuffled Deck Count = 5.
New Card Order:
Card #0 ID: 4
Card #1 ID: 4
Card #2 ID: 4
Card #3 ID: 1
Card #4 ID: 1
Other player's cards stayed the same.
****************************************
TESTING PLAYER 1
Original Deck Count = 5
Card #0 ID: 4
Card #1 ID: 4
Card #2 ID: 1
Card #3 ID: 4
Card #4 ID: 4
Cards have been shuffled 1 times to find a new order.
Original Deck Count = 5, Shuffled Deck Count = 5.
New Card Order:
Card #0 ID: 4
Card #1 ID: 4
Card #2 ID: 4
Card #3 ID: 4
Card #4 ID: 1
Other player's cards stayed the same.
****************************************
All tests passed!
TESTING gainCard():
Player 0's Starting Info:
Number of Cards in Deck: 5
Number of Cards in Hand: 5
Number of Cards in Discard: 0
Card to draw ID: 16
Starting Supply Pile: 8
--------------------------------
	Added card ID 16 to player's hand. 
	Player's hand increased to 6 cards.
	Supply count of card is now: 7
	Deck count did not change.
	Discard count did not change.
--------------------------------
	Added card ID 16 to player's deck. 
	Player's deck increased to 6 cards.
	Supply count of card is now: 6
	Hand count did not change.
	Discard count did not change.
--------------------------------
	Added card ID 16 to player's deck. 
	Player's discard increased to 6 cards.
	Supply count of card is now: 5
	Hand count did not change.
	Deck count did not change.
--------------------------------
	Other Players Deck is the same.
	Other Players Hand is the same.
	Other Players Discard is the same.
--------------------------------
Card to draw ID: 7
Starting Supply Pile: 10
--------------------------------
	Added card ID 7 to player's hand. 
	Player's hand increased to 7 cards.
	Supply count of card is now: 9
	Deck count did not change.
	Discard count did not change.
--------------------------------
	Added card ID 7 to player's deck. 
	Player's deck increased to 7 cards.
	Supply count of card is now: 8
	Hand count did not change.
	Discard count did not change.
--------------------------------
	Added card ID 7 to player's deck. 
	Player's discard increased to 7 cards.
	Supply count of card is now: 7
	Hand count did not change.
	Deck count did not change.
--------------------------------
	Other Players Deck is the same.
	Other Players Hand is the same.
	Other Players Discard is the same.
--------------------------------
Card to draw ID: 11
Starting Supply Pile: 10
--------------------------------
	Added card ID 11 to player's hand. 
	Player's hand increased to 8 cards.
	Supply count of card is now: 9
	Deck count did not change.
	Discard count did not change.
--------------------------------
	Added card ID 11 to player's deck. 
	Player's deck increased to 8 cards.
	Supply count of card is now: 8
	Hand count did not change.
	Discard count did not change.
--------------------------------
	Added card ID 11 to player's deck. 
	Player's discard increased to 8 cards.
	Supply count of card is now: 7
	Hand count did not change.
	Deck count did not change.
--------------------------------
	Other Players Deck is the same.
	Other Players Hand is the same.
	Other Players Discard is the same.
--------------------------------
Player 0's Ending Info:
Number of Cards in Deck: 8
Number of Cards in Hand: 8
Number of Cards in Discard: 3
Cards Tested: 
16
7
11
--------------------------------
Player 1's Starting Info:
Number of Cards in Deck: 5
Number of Cards in Hand: 5
Number of Cards in Discard: 0
Card to draw ID: 7
Starting Supply Pile: 7
--------------------------------
	Added card ID 7 to player's hand. 
	Player's hand increased to 6 cards.
	Supply count of card is now: 6
	Deck count did not change.
	Discard count did not change.
--------------------------------
	Added card ID 7 to player's deck. 
	Player's deck increased to 6 cards.
	Supply count of card is now: 5
	Hand count did not change.
	Discard count did not change.
--------------------------------
	Added card ID 7 to player's deck. 
	Player's discard increased to 6 cards.
	Supply count of card is now: 4
	Hand count did not change.
	Deck count did not change.
--------------------------------
	Other Players Deck is the same.
	Other Players Hand is the same.
	Other Players Discard is the same.
--------------------------------
Card to draw ID: 16
Starting Supply Pile: 5
--------------------------------
	Added card ID 16 to player's hand. 
	Player's hand increased to 7 cards.
	Supply count of card is now: 4
	Deck count did not change.
	Discard count did not change.
--------------------------------
	Added card ID 16 to player's deck. 
	Player's deck increased to 7 cards.
	Supply count of card is now: 3
	Hand count did not change.
	Discard count did not change.
--------------------------------
	Added card ID 16 to player's deck. 
	Player's discard increased to 7 cards.
	Supply count of card is now: 2
	Hand count did not change.
	Deck count did not change.
--------------------------------
	Other Players Deck is the same.
	Other Players Hand is the same.
	Other Players Discard is the same.
--------------------------------
Card to draw ID: 11
Starting Supply Pile: 7
--------------------------------
	Added card ID 11 to player's hand. 
	Player's hand increased to 8 cards.
	Supply count of card is now: 6
	Deck count did not change.
	Discard count did not change.
--------------------------------
	Added card ID 11 to player's deck. 
	Player's deck increased to 8 cards.
	Supply count of card is now: 5
	Hand count did not change.
	Discard count did not change.
--------------------------------
	Added card ID 11 to player's deck. 
	Player's discard increased to 8 cards.
	Supply count of card is now: 4
	Hand count did not change.
	Deck count did not change.
--------------------------------
	Other Players Deck is the same.
	Other Players Hand is the same.
	Other Players Discard is the same.
--------------------------------
Player 1's Ending Info:
Number of Cards in Deck: 8
Number of Cards in Hand: 8
Number of Cards in Discard: 3
Cards Tested: 
7
16
11
--------------------------------
Testing adding a card from an empty supply pile: 
Original Supply Count of Adventurer: 4
Supply Count of Adventurer: 0
Card was NOT successfully added.
--------------------------------
Testing adding a card not included in game: 
Trying to add ambassador...
Card was NOT successfully added.
--------------------------------
All tests passed!
TESTING Smithy:
-------------------------
Testing Player 0.
Added Smithy to current hand. Hand Count = 6.
Smithy supply count decreased by 1. 
Playing Smithy...
Smithy was played successfully.
Smithy is no longer in player's hand.
Player should have 8 cards in their hand (original hand - Smithy + 3)
Player has 7 cards in their hand. TEST FAILED 163 cardtest1.c 
Player has 1 card(s) in their played card pile. 
Played card is a Smithy.
Player has 3 card(s) in their deck (should be 2). TEST FAILED 214 cardtest1.c
All new cards came from original deck.
Other player's state did not change. 
Supply Counts of all Victory Cards remained the same. 
Supply Counts of all Kingdom Cards remained the same. 
-------------------------
Testing Player 1.
Added Smithy to current hand. Hand Count = 6.
Smithy supply count decreased by 1. 
Playing Smithy...
Smithy was played successfully.
Smithy is no longer in player's hand.
Player should have 8 cards in their hand (original hand - Smithy + 3)
Player has 7 cards in their hand. TEST FAILED 163 cardtest1.c 
Player has 1 card(s) in their played card pile. 
Played card is a Smithy.
Player has 3 card(s) in their deck (should be 2). TEST FAILED 214 cardtest1.c
All new cards came from original deck.
Other player's state did not change. 
Supply Counts of all Victory Cards remained the same. 
Supply Counts of all Kingdom Cards remained the same. 
4 test(s) failed.
TESTING Adventurer:
-------------------------
Testing Player 0.
Added Adventurer to current hand. Hand Count = 6.
Adventurer supply count decreased by 1. 
Playing Adventurer...
Adventurer was played successfully.
Adventurer remains in player's hand. TEST FAILED 149, cardtest2.c
Player should have 7 cards in their hand (original hand 6 - Adventurer + 2 Treasure)
Player has 8 cards in their hand. TEST FAILED 169 cardtest2.c 
Player has 0 card(s) in their played card pile. TEST FAILED 186 cardtest2.c
Player has 3 card(s) in their deck (used to have 5). 
Cards added were Treasure cards. 
New Card 7 does NOT come from original deck. TEST FAILED 270 cardtest2.c
Other player's state did not change. 
Supply Counts of all Victory Cards remained the same. 
Supply Counts of all Kingdom Cards remained the same. 
3 test(s) failed.
TESTING Steward:
-------------------------
Testing Steward Option 1.
Added Steward to current hand. Hand Count = 6.
Steward supply count decreased by 1. 
Playing Steward...
Steward was played successfully.
Steward is no longer in player's hand.
Steward is in played card pile.
Player drew 2 cards successfully.
New cards come from original deck.
Other player's state did not change. 
Supply Counts of all Victory Cards remained the same. 
Supply Counts of all Kingdom Cards remained the same. 
-------------------------
Testing Steward Option 2.
Added Steward to current hand. Hand Count = 6.
Steward supply count decreased by 1. 
Playing Steward...
Steward was played successfully.
Steward is no longer in player's hand.
Steward is in played card pile.
Player DID NOT gain 2 coins. Has 3 coins (should be 5). TEST FAILED 238 cardtest3.c
Hand count decreased by 1 (Steward).
Deck count stayed the same.
Discard count stayed the same.
Other player's state did not change. 
Supply Counts of all Victory Cards remained the same. 
Supply Counts of all Kingdom Cards remained the same. 
-------------------------
Testing Steward Option 3.
Added Steward to current hand. Hand Count = 6.
Steward supply count decreased by 1. 
Playing Steward...
Steward was played successfully.
Steward remains in player's hand. TEST FAILED 164, cardtest3.c
2 Cards + Steward were removed from hand. 
2 Cards + Steward were NOT added to discard. TEST FAILED 326 cardtest3.c
Other player's state did not change. 
Supply Counts of all Victory Cards remained the same. 
Supply Counts of all Kingdom Cards remained the same. 
3 test(s) failed.
TESTING Village:
-------------------------
Testing Player 0.
Added Village to current hand. Hand Count = 6.
Village supply count decreased by 1. 
Playing Village...
Village was played successfully.
Village remains in player's hand. TEST FAILED 168, cardtest4.c
Player did NOT receive a new card.  Kept Village in hand. TEST FAILED 192, cardtest4.c
Player has 2 more actions.
Other player's state changed. TEST FAILED 228 cardtest4.c
Supply Counts of all Victory Cards remained the same. 
Supply Counts of all Kingdom Cards remained the same. 
-------------------------
Testing Player 1.
Added Village to current hand. Hand Count = 6.
Village supply count decreased by 1. 
Playing Village...
Village was played successfully.
Village is no longer in player's hand.
Village is in played card pile.
Player received one new card. 
Player has 2 more actions.
Other player's state did not change. 
Supply Counts of all Victory Cards remained the same. 
Supply Counts of all Kingdom Cards remained the same. 
3 test(s) failed.
/***********************************
*				   *
*	GCov Info Starting	   *
*				   *
***********************************/
File 'dominion.c'
Lines executed:39.08% of 563
Creating 'dominion.c.gcov'

File 'dominion.c'
Lines executed:39.08% of 563
Branches executed:39.09% of 417
Taken at least once:24.94% of 417
Calls executed:32.63% of 95
Creating 'dominion.c.gcov'

Function 'updateCoins'
Lines executed:81.82% of 11

Function 'gainCard'
Lines executed:100.00% of 13

Function 'discardCard'
Lines executed:100.00% of 13

Function 'playGreatHall'
Lines executed:0.00% of 6

Function 'playEmbargo'
Lines executed:0.00% of 8

Function 'playVillage'
Lines executed:100.00% of 6

Function 'playSmithy'
Lines executed:100.00% of 6

Function 'playAdventurer'
Lines executed:77.78% of 18

Function 'cardEffect'
Lines executed:9.18% of 207

Function 'getCost'
Lines executed:23.33% of 30

Function 'drawCard'
Lines executed:95.45% of 22

Function 'getWinners'
Lines executed:0.00% of 24

Function 'scoreFor'
Lines executed:0.00% of 24

Function 'isGameOver'
Lines executed:0.00% of 10

Function 'endTurn'
Lines executed:100.00% of 20

Function 'whoseTurn'
Lines executed:100.00% of 2

Function 'fullDeckCount'
Lines executed:0.00% of 9

Function 'supplyCount'
Lines executed:100.00% of 2

Function 'handCard'
Lines executed:100.00% of 3

Function 'numHandCards'
Lines executed:100.00% of 2

Function 'buyCard'
Lines executed:0.00% of 13

Function 'playCard'
Lines executed:71.43% of 14

Function 'shuffle'
Lines executed:93.75% of 16

Function 'initializeGame'
Lines executed:83.87% of 62

Function 'kingdomCards'
Lines executed:0.00% of 13

Function 'newGame'
Lines executed:0.00% of 3

Function 'compare'
Lines executed:100.00% of 6

File 'dominion.c'
Lines executed:39.08% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:int playAdventurer(struct gameState*, int);
        -:    8:int playSmithy(struct gameState*, int, int);
        -:    9:int playVillage(struct gameState*, int, int);
        -:   10:int playEmbargo(struct gameState*, int, int, int);
        -:   11:int playGreatHall(struct gameState*, int, int);
        -:   12:
      339:   13:int compare(const void* a, const void* b) {
      339:   14:  if (*(int*)a > *(int*)b)
       14:   15:    return 1;
      325:   16:  if (*(int*)a < *(int*)b)
       84:   17:    return -1;
      241:   18:  return 0;
        -:   19:}
        -:   20:
    #####:   21:struct gameState* newGame() {
    #####:   22:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   23:  return g;
        -:   24:}
        -:   25:
    #####:   26:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   27:		  int k8, int k9, int k10) {
    #####:   28:  int* k = malloc(10 * sizeof(int));
    #####:   29:  k[0] = k1;
    #####:   30:  k[1] = k2;
    #####:   31:  k[2] = k3;
    #####:   32:  k[3] = k4;
    #####:   33:  k[4] = k5;
    #####:   34:  k[5] = k6;
    #####:   35:  k[6] = k7;
    #####:   36:  k[7] = k8;
    #####:   37:  k[8] = k9;
    #####:   38:  k[9] = k10;
    #####:   39:  return k;
        -:   40:}
        -:   41:
        9:   42:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   43:		   struct gameState *state) {
        -:   44:
        -:   45:  int i;
        -:   46:  int j;
        -:   47:  int it;			
        -:   48:  //set up random number generator
        9:   49:  SelectStream(1);
        9:   50:  PutSeed((long)randomSeed);
        -:   51:  
        -:   52:  //check number of players
        9:   53:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   54:    {
    #####:   55:      return -1;
        -:   56:    }
        -:   57:
        -:   58:  //set number of players
        9:   59:  state->numPlayers = numPlayers;
        -:   60:
        -:   61:  //check selected kingdom cards are different
       99:   62:  for (i = 0; i < 10; i++)
        -:   63:    {
      990:   64:      for (j = 0; j < 10; j++)
        -:   65:        {
      900:   66:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   67:	    {
    #####:   68:	      return -1;
        -:   69:	    }
        -:   70:        }
        -:   71:    }
        -:   72:
        -:   73:
        -:   74:  //initialize supply
        -:   75:  ///////////////////////////////
        -:   76:
        -:   77:  //set number of Curse cards
        9:   78:  if (numPlayers == 2)
        -:   79:    {
        9:   80:      state->supplyCount[curse] = 10;
        -:   81:    }
    #####:   82:  else if (numPlayers == 3)
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 20;
        -:   85:    }
        -:   86:  else
        -:   87:    {
    #####:   88:      state->supplyCount[curse] = 30;
        -:   89:    }
        -:   90:
        -:   91:  //set number of Victory cards
        9:   92:  if (numPlayers == 2)
        -:   93:    {
        9:   94:      state->supplyCount[estate] = 8;
        9:   95:      state->supplyCount[duchy] = 8;
        9:   96:      state->supplyCount[province] = 8;
        -:   97:    }
        -:   98:  else
        -:   99:    {
    #####:  100:      state->supplyCount[estate] = 12;
    #####:  101:      state->supplyCount[duchy] = 12;
    #####:  102:      state->supplyCount[province] = 12;
        -:  103:    }
        -:  104:
        -:  105:  //set number of Treasure cards
        9:  106:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  107:  state->supplyCount[silver] = 40;
        9:  108:  state->supplyCount[gold] = 30;
        -:  109:
        -:  110:  //set number of Kingdom cards
      189:  111:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  112:    {
     1485:  113:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  114:	{
     1395:  115:	  if (kingdomCards[j] == i)
        -:  116:	    {
        -:  117:	      //check if card is a 'Victory' Kingdom card
       90:  118:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  119:		{
       32:  120:		  if (numPlayers == 2){ 
       16:  121:		    state->supplyCount[i] = 8; 
        -:  122:		  }
    #####:  123:		  else{ state->supplyCount[i] = 12; }
        -:  124:		}
        -:  125:	      else
        -:  126:		{
       74:  127:		  state->supplyCount[i] = 10;
        -:  128:		}
       90:  129:	      break;
        -:  130:	    }
        -:  131:	  else    //card is not in the set choosen for the game
        -:  132:	    {
     1305:  133:	      state->supplyCount[i] = -1;
        -:  134:	    }
        -:  135:	}
        -:  136:
        -:  137:    }
        -:  138:
        -:  139:  ////////////////////////
        -:  140:  //supply intilization complete
        -:  141:
        -:  142:  //set player decks
       27:  143:  for (i = 0; i < numPlayers; i++)
        -:  144:    {
       18:  145:      state->deckCount[i] = 0;
       72:  146:      for (j = 0; j < 3; j++)
        -:  147:	{
       54:  148:	  state->deck[i][j] = estate;
       54:  149:	  state->deckCount[i]++;
        -:  150:	}
      144:  151:      for (j = 3; j < 10; j++)
        -:  152:	{
      126:  153:	  state->deck[i][j] = copper;
      126:  154:	  state->deckCount[i]++;		
        -:  155:	}
        -:  156:    }
        -:  157:
        -:  158:  //shuffle player decks
       27:  159:  for (i = 0; i < numPlayers; i++)
        -:  160:    {
       18:  161:      if ( shuffle(i, state) < 0 )
        -:  162:	{
    #####:  163:	  return -1;
        -:  164:	}
        -:  165:    }
        -:  166:
        -:  167:  //draw player hands
       27:  168:  for (i = 0; i < numPlayers; i++)
        -:  169:    {  
        -:  170:      //initialize hand size to zero
       18:  171:      state->handCount[i] = 0;
       18:  172:      state->discardCount[i] = 0;
        -:  173:      //draw 5 cards
        -:  174:      // for (j = 0; j < 5; j++)
        -:  175:      //	{
        -:  176:      //	  drawCard(i, state);
        -:  177:      //	}
        -:  178:    }
        -:  179:  
        -:  180:  //set embargo tokens to 0 for all supply piles
      252:  181:  for (i = 0; i <= treasure_map; i++)
        -:  182:    {
      243:  183:      state->embargoTokens[i] = 0;
        -:  184:    }
        -:  185:
        -:  186:  //initialize first player's turn
        9:  187:  state->outpostPlayed = 0;
        9:  188:  state->phase = 0;
        9:  189:  state->numActions = 1;
        9:  190:  state->numBuys = 1;
        9:  191:  state->playedCardCount = 0;
        9:  192:  state->whoseTurn = 0;
        9:  193:  state->handCount[state->whoseTurn] = 0;
        -:  194:  //int it; move to top
        -:  195:
        -:  196:  //Moved draw cards to here, only drawing at the start of a turn
       54:  197:  for (it = 0; it < 5; it++){
       45:  198:    drawCard(state->whoseTurn, state);
        -:  199:  }
        -:  200:
        9:  201:  updateCoins(state->whoseTurn, state, 0);
        -:  202:
        9:  203:  return 0;
        -:  204:}
        -:  205:
       25:  206:int shuffle(int player, struct gameState *state) {
        -:  207: 
        -:  208:
        -:  209:  int newDeck[MAX_DECK];
       25:  210:  int newDeckPos = 0;
        -:  211:  int card;
        -:  212:  int i;
        -:  213:
       25:  214:  if (state->deckCount[player] < 1)
    #####:  215:    return -1;
       25:  216:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  217:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  218:
      277:  219:  while (state->deckCount[player] > 0) {
      227:  220:    card = floor(Random() * state->deckCount[player]);
      227:  221:    newDeck[newDeckPos] = state->deck[player][card];
      227:  222:    newDeckPos++;
      755:  223:    for (i = card; i < state->deckCount[player]-1; i++) {
      528:  224:      state->deck[player][i] = state->deck[player][i+1];
        -:  225:    }
      227:  226:    state->deckCount[player]--;
        -:  227:  }
      252:  228:  for (i = 0; i < newDeckPos; i++) {
      227:  229:    state->deck[player][i] = newDeck[i];
      227:  230:    state->deckCount[player]++;
        -:  231:  }
        -:  232:
       25:  233:  return 0;
        -:  234:}
        -:  235:
        8:  236:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  237:{	
        -:  238:  int card;
        8:  239:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  240:
        -:  241:  //check if it is the right phase
        8:  242:  if (state->phase != 0)
        -:  243:    {
    #####:  244:      return -1;
        -:  245:    }
        -:  246:	
        -:  247:  //check if player has enough actions
        8:  248:  if ( state->numActions < 1 )
        -:  249:    {
    #####:  250:      return -1;
        -:  251:    }
        -:  252:	
        -:  253:  //get card played
        8:  254:  card = handCard(handPos, state);
        -:  255:	
        -:  256:  //check if selected card is an action
        8:  257:  if ( card < adventurer || card > treasure_map )
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:	
        -:  262:  //play card
        8:  263:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  264:    {
    #####:  265:      return -1;
        -:  266:    }
        -:  267:	
        -:  268:  //reduce number of actions
        8:  269:  state->numActions--;
        -:  270:
        -:  271:  //update coins (Treasure cards may be added with card draws)
        8:  272:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  273:	
        8:  274:  return 0;
        -:  275:}
        -:  276:
    #####:  277:int buyCard(int supplyPos, struct gameState *state) {
        -:  278:  int who;
        -:  279:  if (DEBUG){
        -:  280:    printf("Entering buyCard...\n");
        -:  281:  }
        -:  282:
        -:  283:  // I don't know what to do about the phase thing.
        -:  284:
    #####:  285:  who = state->whoseTurn;
        -:  286:
    #####:  287:  if (state->numBuys < 1){
        -:  288:    if (DEBUG)
        -:  289:      printf("You do not have any buys left\n");
    #####:  290:    return -1;
    #####:  291:  } else if (supplyCount(supplyPos, state) <1){
        -:  292:    if (DEBUG)
        -:  293:      printf("There are not any of that type of card left\n");
    #####:  294:    return -1;
    #####:  295:  } else if (state->coins < getCost(supplyPos)){
        -:  296:    if (DEBUG) 
        -:  297:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  298:    return -1;
        -:  299:  } else {
    #####:  300:    state->phase=1;
        -:  301:    //state->supplyCount[supplyPos]--;
    #####:  302:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  303:  
    #####:  304:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  305:    state->numBuys--;
        -:  306:    if (DEBUG)
        -:  307:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  308:  }
        -:  309:
        -:  310:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  311:  //state->discardCount[who]++;
        -:  312:    
    #####:  313:  return 0;
        -:  314:}
        -:  315:
      123:  316:int numHandCards(struct gameState *state) {
      123:  317:  return state->handCount[ whoseTurn(state) ];
        -:  318:}
        -:  319:
      105:  320:int handCard(int handPos, struct gameState *state) {
      105:  321:  int currentPlayer = whoseTurn(state);
      105:  322:  return state->hand[currentPlayer][handPos];
        -:  323:}
        -:  324:
       28:  325:int supplyCount(int card, struct gameState *state) {
       28:  326:  return state->supplyCount[card];
        -:  327:}
        -:  328:
    #####:  329:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  330:  int i;
    #####:  331:  int count = 0;
        -:  332:
    #####:  333:  for (i = 0; i < state->deckCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->deck[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->handCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->hand[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  for (i = 0; i < state->discardCount[player]; i++)
        -:  344:    {
    #####:  345:      if (state->discard[player][i] == card) count++;
        -:  346:    }
        -:  347:
    #####:  348:  return count;
        -:  349:}
        -:  350:
      251:  351:int whoseTurn(struct gameState *state) {
      251:  352:  return state->whoseTurn;
        -:  353:}
        -:  354:
       15:  355:int endTurn(struct gameState *state) {
        -:  356:  int k;
        -:  357:  int i;
       15:  358:  int currentPlayer = whoseTurn(state);
        -:  359:  
        -:  360:  //Discard hand
      105:  361:  for (i = 0; i < state->handCount[currentPlayer]; i++){
       90:  362:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       90:  363:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  364:  }
       15:  365:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  366:    
        -:  367:  //Code for determining the player
       15:  368:  if (currentPlayer < (state->numPlayers - 1)){ 
        8:  369:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  370:  }
        -:  371:  else{
        7:  372:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  373:  }
        -:  374:
       15:  375:  state->outpostPlayed = 0;
       15:  376:  state->phase = 0;
       15:  377:  state->numActions = 1;
       15:  378:  state->coins = 0;
       15:  379:  state->numBuys = 1;
       15:  380:  state->playedCardCount = 0;
       15:  381:  state->handCount[state->whoseTurn] = 0;
        -:  382:
        -:  383:  //int k; move to top
        -:  384:  //Next player draws hand
       90:  385:  for (k = 0; k < 5; k++){
       75:  386:    drawCard(state->whoseTurn, state);//Draw a card
        -:  387:  }
        -:  388:
        -:  389:  //Update money
       15:  390:  updateCoins(state->whoseTurn, state , 0);
        -:  391:
       15:  392:  return 0;
        -:  393:}
        -:  394:
    #####:  395:int isGameOver(struct gameState *state) {
        -:  396:  int i;
        -:  397:  int j;
        -:  398:	
        -:  399:  //if stack of Province cards is empty, the game ends
    #####:  400:  if (state->supplyCount[province] == 0)
        -:  401:    {
    #####:  402:      return 1;
        -:  403:    }
        -:  404:
        -:  405:  //if three supply pile are at 0, the game ends
    #####:  406:  j = 0;
    #####:  407:  for (i = 0; i < 25; i++)
        -:  408:    {
    #####:  409:      if (state->supplyCount[i] == 0)
        -:  410:	{
    #####:  411:	  j++;
        -:  412:	}
        -:  413:    }
    #####:  414:  if ( j >= 3)
        -:  415:    {
    #####:  416:      return 1;
        -:  417:    }
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
    #####:  422:int scoreFor (int player, struct gameState *state) {
        -:  423:
        -:  424:  int i;
    #####:  425:  int score = 0;
        -:  426:  //score from hand
    #####:  427:  for (i = 0; i < state->handCount[player]; i++)
        -:  428:    {
    #####:  429:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  430:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  431:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  432:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  433:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  434:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  435:    }
        -:  436:
        -:  437:  //score from discard
    #####:  438:  for (i = 0; i < state->discardCount[player]; i++)
        -:  439:    {
    #####:  440:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  441:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  442:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  443:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  444:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  445:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  446:    }
        -:  447:
        -:  448:  //score from deck
    #####:  449:  for (i = 0; i < state->discardCount[player]; i++)
        -:  450:    {
    #####:  451:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  452:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  453:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  454:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  455:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  456:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  457:    }
        -:  458:
    #####:  459:  return score;
        -:  460:}
        -:  461:
    #####:  462:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  463:  int i;	
        -:  464:  int j;
        -:  465:  int highScore;
        -:  466:  int currentPlayer;
        -:  467:
        -:  468:  //get score for each player
    #####:  469:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  470:    {
        -:  471:      //set unused player scores to -9999
    #####:  472:      if (i >= state->numPlayers)
        -:  473:	{
    #####:  474:	  players[i] = -9999;
        -:  475:	}
        -:  476:      else
        -:  477:	{
    #####:  478:	  players[i] = scoreFor (i, state);
        -:  479:	}
        -:  480:    }
        -:  481:
        -:  482:  //find highest score
    #####:  483:  j = 0;
    #####:  484:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  485:    {
    #####:  486:      if (players[i] > players[j])
        -:  487:	{
    #####:  488:	  j = i;
        -:  489:	}
        -:  490:    }
    #####:  491:  highScore = players[j];
        -:  492:
        -:  493:  //add 1 to players who had less turns
    #####:  494:  currentPlayer = whoseTurn(state);
    #####:  495:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  496:    {
    #####:  497:      if ( players[i] == highScore && i > currentPlayer )
        -:  498:	{
    #####:  499:	  players[i]++;
        -:  500:	}
        -:  501:    }
        -:  502:
        -:  503:  //find new highest score
    #####:  504:  j = 0;
    #####:  505:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  506:    {
    #####:  507:      if ( players[i] > players[j] )
        -:  508:	{
    #####:  509:	  j = i;
        -:  510:	}
        -:  511:    }
    #####:  512:  highScore = players[j];
        -:  513:
        -:  514:  //set winners in array to 1 and rest to 0
    #####:  515:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  516:    {
    #####:  517:      if ( players[i] == highScore )
        -:  518:	{
    #####:  519:	  players[i] = 1;
        -:  520:	}
        -:  521:      else
        -:  522:	{
    #####:  523:	  players[i] = 0;
        -:  524:	}
        -:  525:    }
        -:  526:
    #####:  527:  return 0;
        -:  528:}
        -:  529:
      130:  530:int drawCard(int player, struct gameState *state)
        -:  531:{	int count;
        -:  532:  int deckCounter;
      130:  533:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  534:    
        -:  535:    //Step 1 Shuffle the discard pile back into a deck
        -:  536:    int i;
        -:  537:    //Move discard to deck
       36:  538:    for (i = 0; i < state->discardCount[player];i++){
       32:  539:      state->deck[player][i] = state->discard[player][i];
       32:  540:      state->discard[player][i] = -1;
        -:  541:    }
        -:  542:
        4:  543:    state->deckCount[player] = state->discardCount[player];
        4:  544:    state->discardCount[player] = 0;//Reset discard
        -:  545:
        -:  546:    //Shufffle the deck
        4:  547:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  548:   
        -:  549:    if (DEBUG){//Debug statements
        -:  550:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  551:    }
        -:  552:    
        4:  553:    state->discardCount[player] = 0;
        -:  554:
        -:  555:    //Step 2 Draw Card
        4:  556:    count = state->handCount[player];//Get current player's hand count
        -:  557:    
        -:  558:    if (DEBUG){//Debug statements
        -:  559:      printf("Current hand count: %d\n", count);
        -:  560:    }
        -:  561:    
        4:  562:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  563:
        4:  564:    if (deckCounter == 0)
    #####:  565:      return -1;
        -:  566:
        4:  567:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        4:  568:    state->deckCount[player]--;
        4:  569:    state->handCount[player]++;//Increment hand count
        -:  570:  }
        -:  571:
        -:  572:  else{
      126:  573:    int count = state->handCount[player];//Get current hand count for player
        -:  574:    int deckCounter;
        -:  575:    if (DEBUG){//Debug statements
        -:  576:      printf("Current hand count: %d\n", count);
        -:  577:    }
        -:  578:
      126:  579:    deckCounter = state->deckCount[player];//Create holder for the deck count
      126:  580:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      126:  581:    state->deckCount[player]--;
      126:  582:    state->handCount[player]++;//Increment hand count
        -:  583:  }
        -:  584:
      130:  585:  return 0;
        -:  586:}
        -:  587:
        5:  588:int getCost(int cardNumber)
        -:  589:{
        5:  590:  switch( cardNumber ) 
        -:  591:    {
        -:  592:    case curse:
    #####:  593:      return 0;
        -:  594:    case estate:
    #####:  595:      return 2;
        -:  596:    case duchy:
    #####:  597:      return 5;
        -:  598:    case province:
    #####:  599:      return 8;
        -:  600:    case copper:
    #####:  601:      return 0;
        -:  602:    case silver:
    #####:  603:      return 3;
        -:  604:    case gold:
    #####:  605:      return 6;
        -:  606:    case adventurer:
    #####:  607:      return 6;
        -:  608:    case council_room:
        1:  609:      return 5;
        -:  610:    case feast:
        1:  611:      return 4;
        -:  612:    case gardens:
    #####:  613:      return 4;
        -:  614:    case mine:
        1:  615:      return 5;
        -:  616:    case remodel:
    #####:  617:      return 4;
        -:  618:    case smithy:
    #####:  619:      return 4;
        -:  620:    case village:
    #####:  621:      return 3;
        -:  622:    case baron:
        1:  623:      return 4;
        -:  624:    case great_hall:
        1:  625:      return 3;
        -:  626:    case minion:
    #####:  627:      return 5;
        -:  628:    case steward:
    #####:  629:      return 3;
        -:  630:    case tribute:
    #####:  631:      return 5;
        -:  632:    case ambassador:
    #####:  633:      return 3;
        -:  634:    case cutpurse:
    #####:  635:      return 4;
        -:  636:    case embargo: 
    #####:  637:      return 2;
        -:  638:    case outpost:
    #####:  639:      return 5;
        -:  640:    case salvager:
    #####:  641:      return 4;
        -:  642:    case sea_hag:
    #####:  643:      return 4;
        -:  644:    case treasure_map:
    #####:  645:      return 4;
        -:  646:    }
        -:  647:	
    #####:  648:  return -1;
        -:  649:}
        -:  650:
        8:  651:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  652:{
        -:  653:  int i;
        -:  654:  int j;
        -:  655:  int k;
        -:  656:  int x;
        -:  657:  int index;
        8:  658:  int currentPlayer = whoseTurn(state);
        8:  659:  int nextPlayer = currentPlayer + 1;
        -:  660:
        8:  661:  int tributeRevealedCards[2] = {-1, -1};
        -:  662:  int temphand[MAX_HAND];// moved above the if statement
        8:  663:  if (nextPlayer > (state->numPlayers - 1)){
        2:  664:    nextPlayer = 0;
        -:  665:  }
        -:  666:  
        -:  667:	
        -:  668:  //uses switch to select card and perform actions
        8:  669:  switch( card ) 
        -:  670:    {
        -:  671:    case adventurer:
        1:  672:	return playAdventurer(state, currentPlayer);
        -:  673:
        -:  674:    case council_room:
        -:  675:      //+4 Cards
    #####:  676:      for (i = 0; i < 4; i++)
        -:  677:	{
    #####:  678:	  drawCard(currentPlayer, state);
        -:  679:	}
        -:  680:			
        -:  681:      //+1 Buy
    #####:  682:      state->numBuys++;
        -:  683:			
        -:  684:      //Each other player draws a card
    #####:  685:      for (i = 0; i < state->numPlayers; i++)
        -:  686:	{
    #####:  687:	  if ( i != currentPlayer )
        -:  688:	    {
    #####:  689:	      drawCard(i, state);
        -:  690:	    }
        -:  691:	}
        -:  692:			
        -:  693:      //put played card in played card pile
    #####:  694:      discardCard(handPos, currentPlayer, state, 0);
        -:  695:			
    #####:  696:      return 0;
        -:  697:			
        -:  698:    case feast:
        -:  699:      //gain card with cost up to 5
        -:  700:      //Backup hand
    #####:  701:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  702:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  703:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  704:      }
        -:  705:      //Backup hand
        -:  706:
        -:  707:      //Update Coins for Buy
    #####:  708:      updateCoins(currentPlayer, state, 5);
    #####:  709:      x = 1;//Condition to loop on
    #####:  710:      while( x == 1) {//Buy one card
    #####:  711:	if (supplyCount(choice1, state) <= 0){
        -:  712:	  if (DEBUG)
        -:  713:	    printf("None of that card left, sorry!\n");
        -:  714:
        -:  715:	  if (DEBUG){
        -:  716:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  717:	  }
        -:  718:	}
    #####:  719:	else if (state->coins < getCost(choice1)){
    #####:  720:	  printf("That card is too expensive!\n");
        -:  721:
        -:  722:	  if (DEBUG){
        -:  723:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  724:	  }
        -:  725:	}
        -:  726:	else{
        -:  727:
        -:  728:	  if (DEBUG){
        -:  729:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  730:	  }
        -:  731:
    #####:  732:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  733:	  x = 0;//No more buying cards
        -:  734:
        -:  735:	  if (DEBUG){
        -:  736:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  737:	  }
        -:  738:
        -:  739:	}
        -:  740:      }     
        -:  741:
        -:  742:      //Reset Hand
    #####:  743:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  744:	state->hand[currentPlayer][i] = temphand[i];
    #####:  745:	temphand[i] = -1;
        -:  746:      }
        -:  747:      //Reset Hand
        -:  748:      			
    #####:  749:      return 0;
        -:  750:			
        -:  751:    case gardens:
    #####:  752:      return -1;
        -:  753:			
        -:  754:    case mine:
    #####:  755:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  756:
    #####:  757:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  758:	{
    #####:  759:	  return -1;
        -:  760:	}
        -:  761:		
    #####:  762:      if (choice2 > treasure_map || choice2 < curse)
        -:  763:	{
    #####:  764:	  return -1;
        -:  765:	}
        -:  766:
    #####:  767:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  768:	{
    #####:  769:	  return -1;
        -:  770:	}
        -:  771:
    #####:  772:      gainCard(choice2, state, 2, currentPlayer);
        -:  773:
        -:  774:      //discard card from hand
    #####:  775:      discardCard(handPos, currentPlayer, state, 0);
        -:  776:
        -:  777:      //discard trashed card
    #####:  778:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  779:	{
    #####:  780:	  if (state->hand[currentPlayer][i] == j)
        -:  781:	    {
    #####:  782:	      discardCard(i, currentPlayer, state, 0);			
    #####:  783:	      break;
        -:  784:	    }
        -:  785:	}
        -:  786:			
    #####:  787:      return 0;
        -:  788:			
        -:  789:    case remodel:
    #####:  790:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  791:
    #####:  792:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  793:	{
    #####:  794:	  return -1;
        -:  795:	}
        -:  796:
    #####:  797:      gainCard(choice2, state, 0, currentPlayer);
        -:  798:
        -:  799:      //discard card from hand
    #####:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:
        -:  802:      //discard trashed card
    #####:  803:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  804:	{
    #####:  805:	  if (state->hand[currentPlayer][i] == j)
        -:  806:	    {
    #####:  807:	      discardCard(i, currentPlayer, state, 0);			
    #####:  808:	      break;
        -:  809:	    }
        -:  810:	}
        -:  811:
        -:  812:
    #####:  813:      return 0;
        -:  814:		
        -:  815:    case smithy:
        2:  816:    	return playSmithy(state, currentPlayer, handPos);
        -:  817:
        -:  818:    case village:
        2:  819:    	return playVillage(state, currentPlayer, handPos);
        -:  820:
        -:  821:
        -:  822:    case baron:
    #####:  823:      state->numBuys++;//Increase buys by 1!
    #####:  824:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  825:	int p = 0;//Iterator for hand!
    #####:  826:	int card_not_discarded = 1;//Flag for discard set!
    #####:  827:	while(card_not_discarded){
    #####:  828:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  829:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  830:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  831:	    state->discardCount[currentPlayer]++;
    #####:  832:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  833:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  834:	    }
    #####:  835:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  836:	    state->handCount[currentPlayer]--;
    #####:  837:	    card_not_discarded = 0;//Exit the loop
        -:  838:	  }
    #####:  839:	  else if (p > state->handCount[currentPlayer]){
        -:  840:	    if(DEBUG) {
        -:  841:	      printf("No estate cards in your hand, invalid choice\n");
        -:  842:	      printf("Must gain an estate if there are any\n");
        -:  843:	    }
    #####:  844:	    if (supplyCount(estate, state) > 0){
    #####:  845:	      gainCard(estate, state, 0, currentPlayer);
    #####:  846:	      state->supplyCount[estate]--;//Decrement estates
    #####:  847:	      if (supplyCount(estate, state) == 0){
    #####:  848:		isGameOver(state);
        -:  849:	      }
        -:  850:	    }
    #####:  851:	    card_not_discarded = 0;//Exit the loop
        -:  852:	  }
        -:  853:			    
        -:  854:	  else{
    #####:  855:	    p++;//Next card
        -:  856:	  }
        -:  857:	}
        -:  858:      }
        -:  859:			    
        -:  860:      else{
    #####:  861:	if (supplyCount(estate, state) > 0){
    #####:  862:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  863:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  864:	  if (supplyCount(estate, state) == 0){
    #####:  865:	    isGameOver(state);
        -:  866:	  }
        -:  867:	}
        -:  868:      }
        -:  869:	    
        -:  870:      
    #####:  871:      return 0;
        -:  872:		
        -:  873:    case great_hall:
    #####:  874:      return playGreatHall(state, currentPlayer, handPos);
        -:  875:
        -:  876:		
        -:  877:    case minion:
        -:  878:      //+1 action
    #####:  879:      state->numActions++;
        -:  880:			
        -:  881:      //discard card from hand
    #####:  882:      discardCard(handPos, currentPlayer, state, 0);
        -:  883:			
    #####:  884:      if (choice1)		//+2 coins
        -:  885:	{
    #####:  886:	  state->coins = state->coins + 2;
        -:  887:	}
        -:  888:			
    #####:  889:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  890:	{
        -:  891:	  //discard hand
    #####:  892:	  while(numHandCards(state) > 0)
        -:  893:	    {
    #####:  894:	      discardCard(handPos, currentPlayer, state, 0);
        -:  895:	    }
        -:  896:				
        -:  897:	  //draw 4
    #####:  898:	  for (i = 0; i < 4; i++)
        -:  899:	    {
    #####:  900:	      drawCard(currentPlayer, state);
        -:  901:	    }
        -:  902:				
        -:  903:	  //other players discard hand and redraw if hand size > 4
    #####:  904:	  for (i = 0; i < state->numPlayers; i++)
        -:  905:	    {
    #####:  906:	      if (i != currentPlayer)
        -:  907:		{
    #####:  908:		  if ( state->handCount[i] > 4 )
        -:  909:		    {
        -:  910:		      //discard hand
    #####:  911:		      while( state->handCount[i] > 0 )
        -:  912:			{
    #####:  913:			  discardCard(handPos, i, state, 0);
        -:  914:			}
        -:  915:							
        -:  916:		      //draw 4
    #####:  917:		      for (j = 0; j < 4; j++)
        -:  918:			{
    #####:  919:			  drawCard(i, state);
        -:  920:			}
        -:  921:		    }
        -:  922:		}
        -:  923:	    }
        -:  924:				
        -:  925:	}
    #####:  926:      return 0;
        -:  927:		
        -:  928:    case steward:
        3:  929:      if (choice1 == 1)
        -:  930:	{
        -:  931:	  //+2 cards
        1:  932:	  drawCard(currentPlayer, state);
        1:  933:	  drawCard(currentPlayer, state);
        -:  934:	}
        2:  935:      else if (choice1 == 2)
        -:  936:	{
        -:  937:	  //+2 coins
        1:  938:	  state->coins = state->coins + 2;
        -:  939:	}
        -:  940:      else
        -:  941:	{
        -:  942:	  //trash 2 cards in hand
        1:  943:	  discardCard(choice2, currentPlayer, state, 1);
        1:  944:	  discardCard(choice3, currentPlayer, state, 1);
        -:  945:	}
        -:  946:			
        -:  947:      //discard card from hand
        3:  948:      discardCard(handPos, currentPlayer, state, 0);
        3:  949:      return 0;
        -:  950:		
        -:  951:    case tribute:
    #####:  952:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  953:	if (state->deckCount[nextPlayer] > 0){
    #####:  954:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  955:	  state->deckCount[nextPlayer]--;
        -:  956:	}
    #####:  957:	else if (state->discardCount[nextPlayer] > 0){
    #####:  958:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  959:	  state->discardCount[nextPlayer]--;
        -:  960:	}
        -:  961:	else{
        -:  962:	  //No Card to Reveal
        -:  963:	  if (DEBUG){
        -:  964:	    printf("No cards to reveal\n");
        -:  965:	  }
        -:  966:	}
        -:  967:      }
        -:  968:	    
        -:  969:      else{
    #####:  970:	if (state->deckCount[nextPlayer] == 0){
    #####:  971:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  972:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  973:	    state->deckCount[nextPlayer]++;
    #####:  974:	    state->discard[nextPlayer][i] = -1;
    #####:  975:	    state->discardCount[nextPlayer]--;
        -:  976:	  }
        -:  977:			    
    #####:  978:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  979:	} 
    #####:  980:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  981:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  982:	state->deckCount[nextPlayer]--;
    #####:  983:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  984:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  985:	state->deckCount[nextPlayer]--;
        -:  986:      }    
        -:  987:		       
    #####:  988:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  989:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  990:	state->playedCardCount++;
    #####:  991:	tributeRevealedCards[1] = -1;
        -:  992:      }
        -:  993:
    #####:  994:      for (i = 0; i <= 2; i ++){
    #####:  995:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  996:	  state->coins += 2;
        -:  997:	}
        -:  998:		    
    #####:  999:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1000:	  drawCard(currentPlayer, state);
    #####: 1001:	  drawCard(currentPlayer, state);
        -: 1002:	}
        -: 1003:	else{//Action Card
    #####: 1004:	  state->numActions = state->numActions + 2;
        -: 1005:	}
        -: 1006:      }
        -: 1007:	    
    #####: 1008:      return 0;
        -: 1009:		
        -: 1010:    case ambassador:
    #####: 1011:      j = 0;		//used to check if player has enough cards to discard
        -: 1012:
    #####: 1013:      if (choice2 > 2 || choice2 < 0)
        -: 1014:	{
    #####: 1015:	  return -1;				
        -: 1016:	}
        -: 1017:
    #####: 1018:      if (choice1 == handPos)
        -: 1019:	{
    #####: 1020:	  return -1;
        -: 1021:	}
        -: 1022:
    #####: 1023:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1024:	{
    #####: 1025:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1026:	    {
    #####: 1027:	      j++;
        -: 1028:	    }
        -: 1029:	}
    #####: 1030:      if (j < choice2)
        -: 1031:	{
    #####: 1032:	  return -1;				
        -: 1033:	}
        -: 1034:
        -: 1035:      if (DEBUG) 
        -: 1036:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1037:
        -: 1038:      //increase supply count for choosen card by amount being discarded
    #####: 1039:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1040:			
        -: 1041:      //each other player gains a copy of revealed card
    #####: 1042:      for (i = 0; i < state->numPlayers; i++)
        -: 1043:	{
    #####: 1044:	  if (i != currentPlayer)
        -: 1045:	    {
    #####: 1046:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1047:	    }
        -: 1048:	}
        -: 1049:
        -: 1050:      //discard played card from hand
    #####: 1051:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1052:
        -: 1053:      //trash copies of cards returned to supply
    #####: 1054:      for (j = 0; j < choice2; j++)
        -: 1055:	{
    #####: 1056:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1057:	    {
    #####: 1058:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1059:		{
    #####: 1060:		  discardCard(i, currentPlayer, state, 1);
    #####: 1061:		  break;
        -: 1062:		}
        -: 1063:	    }
        -: 1064:	}			
        -: 1065:
    #####: 1066:      return 0;
        -: 1067:		
        -: 1068:    case cutpurse:
        -: 1069:
    #####: 1070:      updateCoins(currentPlayer, state, 2);
    #####: 1071:      for (i = 0; i < state->numPlayers; i++)
        -: 1072:	{
    #####: 1073:	  if (i != currentPlayer)
        -: 1074:	    {
    #####: 1075:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1076:		{
    #####: 1077:		  if (state->hand[i][j] == copper)
        -: 1078:		    {
    #####: 1079:		      discardCard(j, i, state, 0);
    #####: 1080:		      break;
        -: 1081:		    }
    #####: 1082:		  if (j == state->handCount[i])
        -: 1083:		    {
    #####: 1084:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1085:			{
        -: 1086:			  if (DEBUG)
        -: 1087:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1088:			}	
    #####: 1089:		      break;
        -: 1090:		    }		
        -: 1091:		}
        -: 1092:					
        -: 1093:	    }
        -: 1094:				
        -: 1095:	}				
        -: 1096:
        -: 1097:      //discard played card from hand
    #####: 1098:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1099:
    #####: 1100:      return 0;
        -: 1101:
        -: 1102:		
        -: 1103:    case embargo: 
    #####: 1104:    	return playEmbargo(state, currentPlayer, handPos, choice1);
        -: 1105:		
        -: 1106:    case outpost:
        -: 1107:      //set outpost flag
    #####: 1108:      state->outpostPlayed++;
        -: 1109:			
        -: 1110:      //discard card
    #####: 1111:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1112:      return 0;
        -: 1113:		
        -: 1114:    case salvager:
        -: 1115:      //+1 buy
    #####: 1116:      state->numBuys++;
        -: 1117:			
    #####: 1118:      if (choice1)
        -: 1119:	{
        -: 1120:	  //gain coins equal to trashed card
    #####: 1121:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1122:	  //trash card
    #####: 1123:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1124:	}
        -: 1125:			
        -: 1126:      //discard card
    #####: 1127:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1128:      return 0;
        -: 1129:		
        -: 1130:    case sea_hag:
    #####: 1131:      for (i = 0; i < state->numPlayers; i++){
    #####: 1132:	if (i != currentPlayer){
    #####: 1133:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1134:	  state->discardCount[i]++;
    #####: 1135:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1136:	}
        -: 1137:      }
    #####: 1138:      return 0;
        -: 1139:		
        -: 1140:    case treasure_map:
        -: 1141:      //search hand for another treasure_map
    #####: 1142:      index = -1;
    #####: 1143:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1144:	{
    #####: 1145:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1146:	    {
    #####: 1147:	      index = i;
    #####: 1148:	      break;
        -: 1149:	    }
        -: 1150:	}
    #####: 1151:      if (index > -1)
        -: 1152:	{
        -: 1153:	  //trash both treasure cards
    #####: 1154:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1155:	  discardCard(index, currentPlayer, state, 1);
        -: 1156:
        -: 1157:	  //gain 4 Gold cards
    #####: 1158:	  for (i = 0; i < 4; i++)
        -: 1159:	    {
    #####: 1160:	      gainCard(gold, state, 1, currentPlayer);
        -: 1161:	    }
        -: 1162:				
        -: 1163:	  //return success
    #####: 1164:	  return 1;
        -: 1165:	}
        -: 1166:			
        -: 1167:      //no second treasure_map found in hand
    #####: 1168:      return -1;
        -: 1169:    }
        -: 1170:	
    #####: 1171:  return -1;
        -: 1172:}
        -: 1173:
        1: 1174:int playAdventurer(struct gameState* state, int player)
        -: 1175:{
        -: 1176:	int temphand[MAX_HAND];
        1: 1177:	int z = 0;
        -: 1178:	int cardDrawn;
        1: 1179:	int drawnTreasure = 0;
        1: 1180:	int currentPlayer = player;
        -: 1181:
        -: 1182:	do{
        2: 1183:		if(state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to dec
    #####: 1184:			shuffle(currentPlayer, state);
        -: 1185:	}
        2: 1186:	drawCard(currentPlayer, state);
        2: 1187:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card
        2: 1188:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2: 1189:		drawnTreasure++;
        -: 1190:	else{
    #####: 1191:		temphand[z]=cardDrawn;
    #####: 1192:		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1193:		z++;
        -: 1194:	 }	
        2: 1195:	}while(drawnTreasure<2);
        -: 1196:	do{
        1: 1197:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; //discard all cards in play that have beend drawn
        1: 1198:	z=z-1;
        1: 1199:	}while (z-1>=0);
        -: 1200:
        1: 1201:	return 0;
        -: 1202:}
        -: 1203:
        2: 1204:int playSmithy(struct gameState* state, int player, int handPos)
        -: 1205:{
        -: 1206:	int i;
        2: 1207:	int currentPlayer = player;
        -: 1208:    //+3 Cards
        6: 1209:    for (i = 1; i < 3; i++)
        -: 1210:	{
        4: 1211:	  drawCard(currentPlayer, state);
        -: 1212:	}
        -: 1213:
        -: 1214:    //discard card from hand
        2: 1215:    discardCard(handPos, currentPlayer, state, 0);
        2: 1216:    return 0;
        -: 1217:}
        -: 1218:
        2: 1219:int playVillage(struct gameState *state, int player, int handPos)
        -: 1220:{
        2: 1221:	int currentPlayer = 1;
        -: 1222:
        -: 1223:	//+1 Card
        2: 1224:  drawCard(currentPlayer, state);
        -: 1225:
        -: 1226:  //+2 Actions
        2: 1227:  state->numActions = state->numActions + 2;
        -: 1228:
        -: 1229:  //discard played card from hand
        2: 1230:  discardCard(handPos, currentPlayer, state, 0);
        2: 1231:  return 0;
        -: 1232:
        -: 1233:}
        -: 1234:
    #####: 1235:int playEmbargo(struct gameState *state, int player, int handPos, int choice1)
        -: 1236:{
    #####: 1237:	int currentPlayer = player;
        -: 1238:
        -: 1239:    //+2 Coins
    #####: 1240:    state->coins = state->coins + 2;
        -: 1241:
        -: 1242:    //see if selected pile is in play
    #####: 1243:    if ( state->supplyCount[choice1] == -1 )
        -: 1244:	{
    #####: 1245:	  return -1;
        -: 1246:	}
        -: 1247:
        -: 1248:    //add embargo token to selected supply pile
    #####: 1249:    state->embargoTokens[choice1]--;
        -: 1250:
        -: 1251:    //trash card
    #####: 1252:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1253:    return 0;
        -: 1254:}
        -: 1255:
    #####: 1256:int playGreatHall(struct gameState *state, int player, int handPos)
        -: 1257:{
    #####: 1258:	int currentPlayer = player;
        -: 1259:
        -: 1260:    //+1 Card
    #####: 1261:          drawCard(currentPlayer, state);
        -: 1262:
        -: 1263:          //+1 Actions
    #####: 1264:          state->numActions++;
        -: 1265:
        -: 1266:          //discard card from hand
    #####: 1267:          discardCard(handPos, currentPlayer, state, 0);
    #####: 1268:          return 0;
        -: 1269:}
        -: 1270:
        9: 1271:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1272:{
        -: 1273:	
        -: 1274:  //if card is not trashed, added to Played pile 
        9: 1275:  if (trashFlag < 1)
        -: 1276:    {
        -: 1277:      //add card to played pile
        7: 1278:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        7: 1279:      state->playedCardCount++;
        -: 1280:    }
        -: 1281:	
        -: 1282:  //set played card to -1
        9: 1283:  state->hand[currentPlayer][handPos] = -1;
        -: 1284:	
        -: 1285:  //remove card from player's hand
        9: 1286:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1287:    {
        -: 1288:      //reduce number of cards in hand
        1: 1289:      state->handCount[currentPlayer]--;
        -: 1290:    }
        8: 1291:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1292:    {
        -: 1293:      //reduce number of cards in hand
        1: 1294:      state->handCount[currentPlayer]--;
        -: 1295:    }
        -: 1296:  else 	
        -: 1297:    {
        -: 1298:      //replace discarded card with last card in hand
        7: 1299:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1300:      //set last card to -1
        7: 1301:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1302:      //reduce number of cards in hand
        7: 1303:      state->handCount[currentPlayer]--;
        -: 1304:    }
        -: 1305:	
        9: 1306:  return 0;
        -: 1307:}
        -: 1308:
       28: 1309:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1310:{
        -: 1311:  //Note: supplyPos is enum of choosen card
        -: 1312:	
        -: 1313:  //check if supply pile is empty (0) or card is not used in game (-1)
       28: 1314:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1315:    {
        2: 1316:      return -1;
        -: 1317:    }
        -: 1318:	
        -: 1319:  //added card for [whoseTurn] current player:
        -: 1320:  // toFlag = 0 : add to discard
        -: 1321:  // toFlag = 1 : add to deck
        -: 1322:  // toFlag = 2 : add to hand
        -: 1323:
       26: 1324:  if (toFlag == 1)
        -: 1325:    {
        6: 1326:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        6: 1327:      state->deckCount[player]++;
        -: 1328:    }
       20: 1329:  else if (toFlag == 2)
        -: 1330:    {
       14: 1331:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       14: 1332:      state->handCount[player]++;
        -: 1333:    }
        -: 1334:  else
        -: 1335:    {
        6: 1336:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        6: 1337:      state->discardCount[player]++;
        -: 1338:    }
        -: 1339:	
        -: 1340:  //decrease number in supply pile
       26: 1341:  state->supplyCount[supplyPos]--;
        -: 1342:	 
       26: 1343:  return 0;
        -: 1344:}
        -: 1345:
       32: 1346:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1347:{
        -: 1348:  int i;
        -: 1349:	
        -: 1350:  //reset coin count
       32: 1351:  state->coins = 0;
        -: 1352:
        -: 1353:  //add coins for each Treasure card in player's hand
      201: 1354:  for (i = 0; i < state->handCount[player]; i++)
        -: 1355:    {
      169: 1356:      if (state->hand[player][i] == copper)
        -: 1357:	{
      117: 1358:	  state->coins += 1;
        -: 1359:	}
       52: 1360:      else if (state->hand[player][i] == silver)
        -: 1361:	{
    #####: 1362:	  state->coins += 2;
        -: 1363:	}
       52: 1364:      else if (state->hand[player][i] == gold)
        -: 1365:	{
    #####: 1366:	  state->coins += 3;
        -: 1367:	}	
        -: 1368:    }	
        -: 1369:
        -: 1370:  //add bonus
       32: 1371:  state->coins += bonus;
        -: 1372:
       32: 1373:  return 0;
        -: 1374:}
        -: 1375:
        -: 1376:
        -: 1377://end of dominion.c
        -: 1378:
